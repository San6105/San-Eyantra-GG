Team ID = GG_1684
Trained weights drive link = https://drive.google.com/file/d/1Pk-r8Ak4uAGzCY1vnFd8k7lG7hqDtoLg/view?usp=drive_link

###############################################################################

Step 1: Import Necessary Libraries

    Import the required libraries to work with ZIP files and create a deep learning model using TensorFlow and Keras.

################################ CODE #########################################

import zipfile
import os
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

################################################################################

Step 2: Define the Zip File Path and Extraction Directory

    Set the path to your ZIP file containing the dataset and the directory where you want to extract the dataset.

################################ CODE #########################################

zip_file_path = '/content/dataset.zip'
extraction_directory = '/content/'

###############################################################################

Step 3: Create the Extraction Directory and Extract the ZIP File

     Create the directory specified in `extraction_directory` if it doesn't already exist and extract the contents of the ZIP file into this directory.

############################### CODE ##########################################

os.makedirs(extraction_directory, exist_ok=True)

with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
    zip_ref.extractall(extraction_directory)

###############################################################################


Step 4: Define the Base Model and Custom Head for Transfer Learning

      In this step, you define a pre-trained base model (MobileNetV2) and create a custom head for the model. The custom head consists of additional layers that will be used for your specific image classification task.

############################### CODE ##########################################

base_model = tf.keras.applications.MobileNetV2(weights='imagenet', include_top=False)

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(1024, activation='relu')(x)
predictions = Dense(5, activation='softmax')(x)  # Assuming 5 classes

model = Model(inputs=base_model.input, outputs=predictions)

###############################################################################

Step 5: Freeze Layers in the Base Model and Compile the Model

      Freeze the layers in the pre-trained base model to prevent them from being updated during training. Then, compile the model by specifying the optimizer, loss function, and metrics to monitor during training.

############################### CODE ##########################################

for layer in base_model.layers:
    layer.trainable = False

model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

###############################################################################

Step 6: Define Data Augmentation and Preprocessing

      Data augmentation involves applying random transformations to your dataset to increase its diversity and improve the model's generalization.

############################### CODE ##########################################

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True,
    validation_split=0.2,
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)

###############################################################################

Step 7: Load and Preprocess the Dataset

     Load your dataset and preprocess it using the defined data augmentation and preprocessing steps. Split the data into training and validation sets.

############################### CODE ##########################################

train_generator = datagen.flow_from_directory(
    '/content/old',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = datagen.flow_from_directory(
    '/content/old',
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

###############################################################################

Step 8: Train the Model

     Train the model using the training and validation data generators you created. 

############################### CODE ##########################################

model.fit(train_generator, validation_data=validation_generator, epochs=20)

###############################################################################

Step 9: Save the Trained Model

      Save the trained model to a file named 'image_classification_model.h5'.

############################### CODE ##########################################

model.save('image_classification_model.h5')

###############################################################################




